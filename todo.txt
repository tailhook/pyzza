Implement try...finally
Implement compilation of all node types (bitwise arithmetic, what else?)
Implement loop primitives (zip, enumerate)
Implement 'global', 'nonlocal' keywords
Implement class variables
Implement 'del' statement
Implement 'assert' statement (how?)
Implement default argument values
Implement generators
Implement getters and setters (using decorators)
Fill global namespace
Make syntax error reporting even better
Allow other files
Make backport script for python2.6
Mandatory optimizations:
    * remove zero jumps
    * "getlocal 1" -> "getlocal_1"
    * returnvoid just after returnvalue
Optional optimizations:
    * optimize constant arithmetics (easy)
    * reuse variables (hard)
    * merging several DoABC tags (moderate, but tedious)
    * ifs with single comparison optimize to specialized jump (moderate)
    * setlocal, getlocal -> dup, setlocal (easy)
    * sort activation slots according to usage frequency (easy)
    * derive variable types, optimize method dispatch and int arithmetic (hard)
    * optimize attribute lookups (getproperty -> getslot) by analyzing class body
