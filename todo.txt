Create standard library with exceptions, hacked methods and so on for more
    pythonic look and feel
Implement try...finally
Implement compilation of all node types (bitwise arithmetic, what else?)
Implement loop primitives (zip, enumerate)
Implement 'global', 'nonlocal' keywords
Implement 'assert' statement (how?)
Implement generators
Implement getters and setters (using decorators)
Fill global namespace
Make syntax error reporting even better
Mandatory optimizations:
    * remove zero jumps
    * "getlocal 1" -> "getlocal_1"
    * returnvoid just after returnvalue
Optional optimizations:
    * optimize constant arithmetics (easy)
    * reuse variables (hard)
    * merging several DoABC tags (moderate, but tedious)
    * ifs with single comparison optimize to specialized jump (moderate)
    * setlocal, getlocal -> dup, setlocal (easy)
    * sort activation slots according to usage frequency (easy)
    * derive variable types, optimize method dispatch and int arithmetic (hard)
    * optimize attribute lookups (getproperty -> getslot)
    * optimize constant class variables (easy)
